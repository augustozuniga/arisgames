<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:view="org.arisgames.editor.view.*"
	xmlns:model="org.arisgames.editor.model.*"
	layout="horizontal" horizontalGap="2"
	backgroundGradientAlphas="[1.0, 1.0]" backgroundGradientColors="[#FFFFFF, #9EE6F8]"
	applicationComplete="init()" xmlns:maps="com.google.maps.*">
	<mx:Script>
		<![CDATA[
			import org.arisgames.editor.model.InstanceProperties;
			import org.arisgames.editor.model.InstantiatedObject;
			import mx.controls.Image;
			import mx.core.DragSource;
			import org.arisgames.editor.model.Item;
		    import com.google.maps.LatLng;
		    import com.google.maps.Map;
	    	import com.google.maps.MapEvent;
		    import com.google.maps.MapType;
			import com.google.maps.MapOptions;
			import com.google.maps.controls.PositionControl;
			import com.google.maps.controls.ZoomControl;
			import com.google.maps.controls.ZoomControlOptions;
			import com.google.maps.controls.MapTypeControl;
			import com.google.maps.controls.ScaleControl;
			import com.google.maps.overlays.Marker;
			import com.google.maps.overlays.MarkerOptions;	
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import org.arisgames.editor.view.Tool;
			import org.arisgames.editor.model.Model;
			import org.arisgames.editor.model.GameObject;
			import org.arisgames.editor.model.Media;
			import org.arisgames.editor.view.GameObjectMarker;
			
			[Bindable]
			public var currentModel:Model = new Model();
			
			[Bindable]
			public var currentGameObject:GameObject;
			
			[Bindable]
			[Embed("assets/editor icons/character.png")]
			public var characterIcon:Class;
					    
			[Bindable]
			[Embed("assets/editor icons/item2.png")]
			public var itemIcon:Class;
					    
			[Bindable]
			[Embed("assets/editor icons/media2.png")]
			public var soundIcon:Class;
					    
			[Bindable]
			[Embed("assets/editor icons/quest.png")]
			public var questIcon:Class;
					    
			[Bindable]
			[Embed("assets/editor icons/video.png")]
			public var videoIcon:Class;
					    
			[Bindable]
			[Embed("assets/editor icons/newObjectIcon.png")]
			public var newObjectIcon:Class;
					    
			[Bindable]
			[Embed("assets/editor icons/page2.png")]
			public var pageIcon:Class;
					    
			[Bindable]
			[Embed("assets/editor icons/folder.png")]
			public var folderIcon:Class;
					    
			[Bindable]
			[Embed("assets/editor icons/picture.png")]
			public var imageIcon:Class;
					    
			[Bindable]
			[Embed("assets/editor icons/question.png")]
			public var secretEventIcon:Class;
					    
			[Bindable]
			[Embed("assets/editor icons/upload.png")]
			public var uploaderIcon:Class;
					    
		    private function onMapPreinitialize(event:MapEvent):void
			{
				map.setInitOptions
				(
					new MapOptions
					({
						center: new LatLng(43.0746561,-89.384422),
						zoom: 14,
						mapType: MapType.NORMAL_MAP_TYPE
					 })
				);
			}
	
		    private function onMapReady(event:Event):void {
				var zco:ZoomControlOptions = new ZoomControlOptions();
				zco.hasScrollTrack = false;
				map.addControl(new ZoomControl(zco));			
				map.addControl(new PositionControl());
				map.addControl(new MapTypeControl());
				map.addControl(new ScaleControl());
	    	}
			
			private function init():void {
				currentModel.populateGameList();
				for(var i:int=0; i < currentModel.XMLDataProvider.length; i++)
				{
					objectNavigator.expandItem(currentModel.XMLDataProvider.getItemAt(i), true);
				}
				currentGameObject = null;
				middleView.removeChild(instanceNavigatorView);
				middleView.removeChild(itemSpecificPropertiesView);
				middleView.removeChild(choicesView);
			}
						
			private function canvasDragEnterHandler(event:DragEvent):void
			{
				var targetCanvas:Canvas = event.target.parent as Canvas;
				var dragXML:XML = (event.dragSource.dataForFormat("treeItems") as Array)[0] as XML;
				var idNum:int = dragXML.attribute("id");
                if (dragXML.name() != "folder" 
                	&& idNum >= 0
                	&& dragXML.attribute("type") != GameObject.QUEST
                	&& targetCanvas is Canvas) 
                {
					targetCanvas.setStyle("borderColor", "#008800");
                    DragManager.acceptDragDrop(targetCanvas);
                }

			}

			private function mapDragExitHandler(event:DragEvent):void
			{
				revertBorder();
			}
			
			private function mapDragDropHandler(event:DragEvent):void
			{
				var dragXML:XML = (event.dragSource.dataForFormat("treeItems") as Array)[0] as XML;
				var xFrac:Number = (event.localX - 4) / map.width;
				var yFrac:Number = (event.localY - 4) / map.height;
				if(   xFrac >= 0 && xFrac <= 1
				   && yFrac >= 0 && yFrac <= 1)
				{
					var northWest:LatLng = map.getLatLngBounds().getNorthWest();
					var southEast:LatLng = map.getLatLngBounds().getSouthEast();
					var markerPos:LatLng = new LatLng(southEast.lat() + (1 - yFrac) * (northWest.lat() - southEast.lat()),
													  northWest.lng() +      xFrac  * (southEast.lng() - northWest.lng()));
					var sourceObject:InstantiatedObject = currentModel.getGameObject(dragXML) as InstantiatedObject;
					var newProps:InstanceProperties = new InstanceProperties(sourceObject);
					var toolMarker:GameObjectMarker = new GameObjectMarker(newProps);
					sourceObject.addInstance(newProps);
					newProps.setGPSMarker(toolMarker);
					toolMarker.setMarker(new Marker(markerPos, new MarkerOptions({icon: toolMarker, draggable: true, hasShadow: true})));
					map.addOverlay(toolMarker.getMarker());
				}
				revertBorder();		
			}
						
			private function revertBorder():void
			{
				mapContainer.setStyle("borderColor", "#000000");
			}
			
			private function onTreeDragComplete(event:DragEvent):void
			{
				event.preventDefault();
			}
			
			private function onTreeClick(event:MouseEvent):void
			{
				var selectedNode:XML = objectNavigator.selectedItem as XML;
				if(selectedNode.attribute("generator") == "true")
				{
					objectNavigator.selectedItem = currentModel.createNewGameObject(selectedNode.attribute("type"));
					selectedNode = objectNavigator.selectedItem as XML;
				}
				else if(selectedNode.attribute("uploader") == "true")
				{
					currentModel.uploadNewMedia(selectedNode.attribute("type"));
				}
				if(selectedNode.name() == "object")
				{
					changePropertiesView(currentModel.getGameObject(selectedNode));
				}
			}
			
			private function changePropertiesView(newObj:GameObject):void
			{
				saveCurrentGameObject();
				currentGameObject = newObj;
				objectNameField.text = currentGameObject.getName();
				descriptionTextArea.text = currentGameObject.getDescription();
				notesTextArea.text = currentGameObject.getNotes();
				if(currentGameObject.hasMedia())
				{
					mediaFileNameLabel.text = currentGameObject.getMedia().getFileName();				
				}
				var type:String = currentGameObject.getType();
				displayPropertiesView.visible = (type != GameObject.SECRET_EVENT);
				if(type == GameObject.QUEST)
				{
					if( middleView.contains(instanceNavigatorView) )
					{
						middleView.removeChild(instanceNavigatorView);
					}
				}
				else
				{
					if( !(middleView.contains(instanceNavigatorView)) )
					{
						middleView.addChild(instanceNavigatorView);
					}
				}
				if(type == GameObject.ITEM)
				{
					if( !(middleView.contains(itemSpecificPropertiesView)) )
					{
						middleView.addChild(itemSpecificPropertiesView);
					}
					droppableCheckBox.selected = (currentGameObject as Item).isDroppable();
					destroyableCheckBox.selected = (currentGameObject as Item).isDestroyable();
				}
				else
				{
					if( middleView.contains(itemSpecificPropertiesView) )
					{
						middleView.removeChild(itemSpecificPropertiesView);					
					}
				}
				if(type == GameObject.PAGE || type == GameObject.CHARACTER)
				{
					if( !(middleView.contains(choicesView)) )
					{
						middleView.addChild(choicesView);					
					}
				}
				else
				{
					if( middleView.contains(choicesView) )
					{
						middleView.removeChild(choicesView);					
					}
				}
			}
			
			private function saveCurrentGameObject():void
			{
				if(currentGameObject != null)
				{
					currentModel.changeName(currentGameObject.getType(), currentGameObject.getID(), objectNameField.text);
					currentGameObject.setName(objectNameField.text);				
					currentGameObject.setNotes(notesTextArea.text);
					var type:String = currentGameObject.getType();
					if(type != GameObject.SECRET_EVENT)
					{
						currentGameObject.setDescription(descriptionTextArea.text);					
					}
					if(type == GameObject.ITEM)
					{
						(currentGameObject as Item).setDroppable(droppableCheckBox.selected);
						(currentGameObject as Item).setDestroyable(destroyableCheckBox.selected);
					}
				}
			}
			
			
			private function getTreeIcon(node:Object):Object
			{
				var name:String = (node as XML).name().toString();
				if(name == "folder")
				{
					return folderIcon;
				}
				var type:String = (node as XML).attribute("type");
				if(name == "object")
				{
					var generator:String = (node as XML).attribute("generator");
					if(generator == "true")
					{
						return newObjectIcon;
					}
					if(type == GameObject.ITEM)
					{
						return itemIcon;
					}
					if(type == GameObject.CHARACTER)
					{
						return characterIcon;
					}
					if(type == GameObject.PAGE)
					{
						return pageIcon;
					}
					if(type == GameObject.QUEST)
					{
						return questIcon;
					}
					if(type == GameObject.SECRET_EVENT)
					{
						return secretEventIcon;
					}
				}
				if(name == "media")
				{
					var uploader:String = (node as XML).attribute("uploader");
					if(uploader == "true")
					{
						return uploaderIcon;
					}
					if(type == Media.IMAGE)
					{
						return imageIcon;
					}
					if(type == Media.SOUND)
					{
						return soundIcon;
					}
					if(type == Media.VIDEO)
					{
						return videoIcon;
					}					
				}
				return null;
			}

		]]>
	</mx:Script>
	<mx:VBox width="200" height="100%">
		<mx:MenuBar id="gameMenuBar" width="100%" labelField="@label">
			<mx:XMLList>
				<menuItem label="File">
					<menuItem label="New Game"/>
					<menuItem label="Load Game"/>
					<menuItem type="separator"/>
					<menuItem label="Save As..."/>
					<menuItem label="Rename"/>
					<menuItem type="separator"/>
					<menuItem label="Exit Editor"/>
				</menuItem>
				<menuItem label="Help">
					<menuItem label="Show Help Window" type="checkbox"/>
					<menuItem label="Enable Tutorial Mode" type="checkbox"/>
					<menuItem label="Open Web Documentation"/>
				</menuItem>
			</mx:XMLList>
		</mx:MenuBar>
		<mx:Tree id="objectNavigator"
			height="100%" width="100%"
			borderStyle="solid" borderColor="#000000" borderThickness="4" cornerRadius="5"
			dataProvider="{currentModel.XMLDataProvider}" labelField="@label"
			click="onTreeClick(event)" allowMultipleSelection="false"
			horizontalScrollPolicy="on" verticalScrollPolicy="auto"
			iconFunction="getTreeIcon"
			dropEnabled="false" dragEnabled="true" dragMoveEnabled="false" dragComplete="onTreeDragComplete(event)"/>
	</mx:VBox>
	<mx:VBox height="100%" width="100%">
		<mx:HBox height="100%" width="100%">
			<mx:TabNavigator width="100%" height="100%">
				<mx:Canvas id="mapContainer" 
					label="GPS Map" width="100%" height="100%"
					dragExit="mapDragExitHandler(event);"
					dragDrop="mapDragDropHandler(event);"
					borderStyle="solid" borderColor="#000000" borderThickness="4" cornerRadius="5">
					<maps:Map xmlns:maps="com.google.maps.*" id="map" 
						mapevent_mapready="onMapReady(event)"
						mapevent_mappreinitialize="onMapPreinitialize(event)"
						width="100%" height="100%" 
						key="ABQIAAAAaBINj42Tz4K8ZaoZWWSnWRT2yXp_ZAY8_ufC3CFXhHIE1NvwkxQkcVoUCrdum-UscUMoKinDrDjThQ"
						dragEnter="canvasDragEnterHandler(event);"/> 		
				</mx:Canvas>
				<mx:Canvas id="qrCodeContainer" 
					label="QR Codes" width="100%" height="100%">
				</mx:Canvas>
				<mx:Canvas id="linkDiagramContainer" 
					label="Link Diagram" width="100%" height="100%">
				</mx:Canvas>
			</mx:TabNavigator>
			<mx:Canvas id="previewWindow"
				width="320" height="370"
				borderStyle="solid" borderColor="#B7BABC" cornerRadius="5" borderThickness="4" backgroundColor="#000000">				
			</mx:Canvas>			
		</mx:HBox>
		<mx:HBox id="propertiesView"
			width="100%" height="100%" horizontalGap="5"
			borderStyle="solid" borderColor="#000000" cornerRadius="5" borderThickness="4" backgroundColor="#FFFFFF">
			<mx:VBox width="100%" height="100%"
				verticalGap="5" paddingLeft="5" paddingTop="5" paddingRight="5" paddingBottom="5">
				<mx:Label text="Name"/>
				<mx:TextInput id="objectNameField"
					maxChars="255" displayAsPassword="false" editable="true" enabled="true" 
					width="100%" borderStyle="solid" borderColor="#000000" borderThickness="1"/>
				<mx:VBox id="displayPropertiesView"
					width="100%" height="100%">
					<mx:Label text="Media"/>
					<mx:HBox width="100%" verticalAlign="middle">
						<mx:Canvas  width="40" height="40" verticalScrollPolicy="off" horizontalScrollPolicy="off"
							borderStyle="solid" borderColor="#000000" borderThickness="1">
							<mx:Image width="40" height="40" source="@Embed('assets/editor icons/media.png')"/>
						</mx:Canvas>
						<mx:TextInput id="mediaFileNameLabel" editable="false"
							width="100%" borderStyle="solid" borderColor="#000000" borderThickness="1"/>											
					</mx:HBox>
					<mx:Label text="Description"/>
					<mx:TextArea id="descriptionTextArea"
						width="100%" height="100%"/>					
				</mx:VBox>
			</mx:VBox>
			<mx:VBox id="middleView"
				width="100%" height="100%"
				verticalGap="5" paddingLeft="5" paddingTop="5" paddingRight="5" paddingBottom="5">
				<mx:HBox id="instanceNavigatorView"
					width="100%" >
					<mx:Canvas  width="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off">
						<mx:VBox horizontalCenter="0">
							<mx:Text>
								<mx:htmlText>
								<![CDATA[Previous<br>Local Copy]]>
								</mx:htmlText>
							</mx:Text>
							<mx:Image width="60" height="60" 
								source="@Embed('assets/editor icons/previous.png')"/>
						</mx:VBox>
					</mx:Canvas>
					<mx:Canvas  width="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off">
						<mx:VBox horizontalCenter="0">
							<mx:Text>
								<mx:htmlText>
								<![CDATA[Next<br>Local Copy]]>
								</mx:htmlText>
							</mx:Text>
							<mx:Image width="60" height="60" 
								source="@Embed('assets/editor icons/next.png')"/>
						</mx:VBox>
					</mx:Canvas>
				</mx:HBox>
				<mx:VBox id="itemSpecificPropertiesView"
					width="100%">
					<mx:Label text="All copies of this item are..."/>
					<mx:HBox 
						width="100%">
						<mx:Canvas  width="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off">
							<mx:VBox horizontalCenter="0">
								<mx:Label text="Droppable"/>
								<mx:HBox>
									<mx:CheckBox id="droppableCheckBox"/>
									<mx:Image width="60" height="60" horizontalCenter="0"
										source="@Embed('assets/editor icons/drop.png')"/>																
								</mx:HBox>
							</mx:VBox>
						</mx:Canvas>
						<mx:Canvas  width="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off">
							<mx:VBox horizontalCenter="0">
								<mx:Label text="Destroyable"/>
								<mx:HBox>
									<mx:CheckBox id="destroyableCheckBox"/>
									<mx:Image width="60" height="60" horizontalCenter="0"
										source="@Embed('assets/editor icons/destroy.png')"/>																
								</mx:HBox>
							</mx:VBox>
						</mx:Canvas>					
					</mx:HBox>
				</mx:VBox>
				<mx:VBox id="choicesView"
					width="100%" height="100%">
					<mx:Label text="Choices offered to player from this page/character include..."/>
					<mx:TextArea id="choicesTextArea" 
						width="100%" height="100%"/>
				</mx:VBox>
			</mx:VBox>
			<mx:VBox width="100%" height="100%"
				verticalGap="5" paddingLeft="5" paddingTop="5" paddingRight="5" paddingBottom="5">
				<mx:Label text="When this object is encountered..."/>
				<mx:HBox width="100%" height="100%">
					<mx:VBox width="100%" height="100%">
						<mx:Label text="Add/Reveal"/>
						<mx:TextArea id="addBox"
							width="100%" height="100%"/>
					</mx:VBox>					
					<mx:VBox width="100%" height="100%">
						<mx:Label text="Take/Hide"/>
						<mx:TextArea id="takeBox"
							width="100%" height="100%"/>
					</mx:VBox>					
				</mx:HBox>					
				<mx:Label text="My Notes (not visible to players)"/>
				<mx:TextArea id="notesTextArea"
					width="100%" height="100%"/>
			</mx:VBox>
		</mx:HBox>
	</mx:VBox>
	
	
		
</mx:Application>
